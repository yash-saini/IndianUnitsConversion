@page "/GoldPrices"
@using ConversionFrontend.Models
@inject HttpClient Http

<PageTitle>Gold Price Calculator</PageTitle>

<div class="conversion-card">
    <div class="card-header">
        <h3 class="mb-0">
            <i class="bi bi-coin me-2"></i>
            Gold Price Calculator
        </h3>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <div class="form-group mb-3">
                    <label class="form-label">Weight</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-rulers"></i></span>
                        <input type="number" step="0.01" class="form-control" @bind="request.Weight" />
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group mb-3">
                    <label class="form-label">Unit</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-box-seam"></i></span>
                        <select class="form-select" @bind="request.Unit">
                            @foreach (var unit in units)
                            {
                                <option value="@unit">@unit</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group mb-3">
                    <label class="form-label">Currency</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-cash-coin"></i></span>
                        <select class="form-select" @bind="request.Currency">
                            @foreach (var currency in currencies)
                            {
                                <option value="@currency">@currency</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <div class="d-grid gap-2 col-md-4 mx-auto mt-4">
            <button class="btn btn-primary" @onclick="CalculatePrice">
                <i class="bi bi-calculator me-2"></i>
                Calculate Price
            </button>
        </div>

        @if (isLoading)
        {
            <div class="d-flex justify-content-center mt-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }

        @if (response != null)
        {
            <div class="result-box mt-4">
                <div class="row">
                    <div class="col-md-5 text-center">
                        <h6>1 @response.Unit of Gold</h6>
                        <h5>@string.Format("{0}{1:N2}", GetSymbol(response.Currency), response.PricePerGram)</h5>
                        <p class="text-uppercase mb-0">@response.Currency</p>
                    </div>
                    <div class="col-md-2 d-flex justify-content-center align-items-center">
                        <i class="bi bi-arrow-right fs-2"></i>
                    </div>
                    <div class="col-md-5 text-center">
                        <h6>@request.Weight @response.Unit of Gold</h6>
                        <h5>@string.Format("{0}{1:N2}", GetSymbol(response.Currency), response.TotalPrice)</h5>
                        <p class="text-uppercase mb-0">@response.Currency</p>
                    </div>
                </div>
            </div>
        }

        @if (errorMessage != null)
        {
            <div class="alert alert-danger mt-3">
                <i class="bi bi-exclamation-triangle me-2"></i>
                @errorMessage
            </div>
        }
    </div>
</div>

<div class="conversion-card mt-4">
    <div class="card-header">
        <h5 class="mb-0">About Gold Price Calculator</h5>
    </div>
    <div class="card-body">
        <p>This calculator provides gold prices based on current market rates. It supports:</p>
        <div class="row">
            <div class="col-md-6">
                <h6>Weight Units:</h6>
                <ul>
                    <li>Gram</li>
                    <li>Tola (11.66g)</li>
                    <li>Ounce (31.10g)</li>
                    <li>Kilogram (1000g)</li>
                </ul>
            </div>
            <div class="col-md-6">
                <h6>Additional Units:</h6>
                <ul>
                    <li>Pound (453.59g)</li>
                    <li>Carat (0.2g)</li>
                </ul>
                <h6 class="mt-3">Currencies:</h6>
                <ul>
                    <li>INR, USD, EUR, GBP</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@code {
    GoldConversionRequest request = new();
    GoldConversionResponse? response;
    string? errorMessage;
    bool isLoading = false;

    List<string> units = new();
    List<string> currencies = new();

    private static readonly Dictionary<string, string> CurrencySymbols = new()
    {
        { "USD", "$" },
        { "INR", "₹" },
        { "EUR", "€" },
        { "GBP", "£" },
        { "JPY", "¥" }
    };

    private string GetSymbol(string currency)
    {
        return CurrencySymbols.TryGetValue(currency.ToUpper(), out var symbol) ? symbol : "";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            units = await Http.GetFromJsonAsync<List<string>>("api/GoldPriceConversion/units") ?? new();
            currencies = await Http.GetFromJsonAsync<List<string>>("api/GoldPriceConversion/currencies") ?? new();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CalculatePrice()
    {
        errorMessage = null;
        response = null;
        isLoading = true;

        try
        {
            if (request.Weight <= 0)
            {
                errorMessage = "Weight must be greater than zero.";
                return;
            }

            var res = await Http.PostAsJsonAsync("api/GoldPriceConversion/calculate", request);

            if (res.IsSuccessStatusCode)
            {
                response = await res.Content.ReadFromJsonAsync<GoldConversionResponse>();
            }
            else
            {
                var error = await res.Content.ReadAsStringAsync();
                errorMessage = !string.IsNullOrWhiteSpace(error) ? error : "Failed to calculate gold price.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}